{"version":3,"sources":["ui/styled/index.ts","ui/Box/index.ts","ui/Text/index.ts","ui/Input/index.ts","ui/Link/index.ts","ui/Button/index.ts","ui/GlobalStyles/index.ts","ui/AutocompleteResults/index.tsx","ui/GoogleFontLoader/index.tsx","pages/Forecast/index.tsx","api/index.ts","config/index.ts","actions/modalCity.ts","pages/Home/index.tsx","containers/Home.ts","components/Sidebar/index.tsx","containers/Forecast.ts","actions/forecast.ts","components/CityPreview/ForecastPreview.tsx","components/CityPreview/index.tsx","actions/top.ts","components/Favorites/index.tsx","components/Modal/components/Body.tsx","actions/favorites.ts","components/Modal/style.ts","components/Modal/index.tsx","components/UserLocation/index.tsx","hooks/index.ts","actions/cities.ts","containers/Sidebar.ts","containers/CityPreview.ts","containers/Favorites.ts","containers/Modal.ts","containers/UserLocation.ts","App.tsx","serviceWorker.ts","ui/styled/theme/index.ts","ui/styled/theme/colors.ts","ui/styled/theme/borders.ts","reducers/forecasts.ts","reducers/cities.ts","reducers/favorites.ts","reducers/top.ts","duck/rootReducer.ts","reducers/modal.ts","reducers/userLocation.ts","duck/index.ts","index.tsx"],"names":["styled","shouldForwardProp","space","layout","grid","position","flexbox","typography","input","props","theme","borders","Link","button","appearance","colors","color","div","Wrap","ul","visible","CityOption","li","primaryDim","AutocompleteResults","cities","callback","Boolean","length","map","city","key","id","onClick","Text","fontSize","name","country","GoogleFontLoader","fonts","font","weights","Forecast","Box","p","forecastApi","axios","create","baseURL","params","access_key","process","units","geo","Geonames","username","lan","encoding","geoApi","cityName","a","search","q","featureCode","maxRows","isNameRequired","locations","geonames","console","error","setModalCity","dispatch","getState","type","some","c","Home","useState","value","setValue","setCities","history","useHistory","useDispatch","element","Input","onChange","e","target","then","res","geoCity","countryName","lat","lng","String","geonameId","population","minLength","debounceTimeout","placeholder","left","right","mt","searchQuery","push","queryString","stringify","connect","Sidebar","top","getTop15Cities","useEffect","topCities","i","j","sort","b","toUpperCase","getSortedTopCities","mb","display","alignItems","mr","Button","isTop","getForecast","showToast","find","get","query","data","current","forecast","last_update","Date","now","toast","success","ForecastPreview","useSelector","state","forecasts","temperature","BoxLink","primary","UnderlinedText","CityPreview","stopPropagation","defaultProps","Favorites","favoriteCities","favorites","favCities","getFavoriteCities","Head","HeadText","ImgBox","src","Description","isFavorite","date","formattedDate","toLocaleDateString","month","day","year","hour","getHours","minutes","getMinutes","height","feelslike","weather_descriptions","weather_icons","bottom","justifyContent","modal","Body","fav","flexDirection","fontWeight","styles","content","padding","width","marginTop","overlay","RModal","setAppElement","Modal","location","useLocation","parse","isOpen","onRequestClose","style","UserLocation","userLocation","setPosition","setError","coords","latitude","longitude","onError","message","navigator","geolocation","watcher","watchPosition","clearWatch","usePosition","log","mapDispatchToProps","response","records","r","fields","geoname_id","ids","App","gridTemplateColumns","path","exact","component","window","hostname","match","secondary","warning","initialState","combineReducers","action","filter","v","findIndex","t","Set","el","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","loading","GlobalStyles","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.58d427e9.chunk.js","sourcesContent":["import theme from \"./theme\";\nimport styled, { CreateStyled } from \"@emotion/styled\";\n\nexport default styled as CreateStyled<typeof theme>;\n","import styled from \"ui/styled\";\nimport {\n  space,\n  SpaceProps,\n  layout,\n  LayoutProps,\n  grid,\n  GridProps,\n  position,\n  PositionProps,\n  flexbox,\n  FlexboxProps,\n} from \"styled-system\";\nimport shouldForwardProp from \"@styled-system/should-forward-prop\";\n\ntype BoxProps = SpaceProps &\n  LayoutProps &\n  GridProps &\n  PositionProps &\n  FlexboxProps;\n\nexport default styled(\"div\", { shouldForwardProp })<BoxProps>`\n  ${space};\n  ${layout};\n  ${grid};\n  ${position};\n  ${flexbox};\n  box-sizing: border-box;\n`;\n","import styled from \"ui/styled\";\nimport { typography, TypographyProps, space, SpaceProps } from \"styled-system\";\nimport shouldForwardProp from \"@styled-system/should-forward-prop\";\n\nexport default styled(\"p\", { shouldForwardProp })<TypographyProps & SpaceProps>`\n  margin: 0;\n  font-family: Fjalla One;\n  ${typography};\n  ${space};\n`;\n","import styled from \"ui/styled\";\n\nexport default styled.input`\n  height: 36px;\n  padding: 0 12px;\n  box-sizing: border-box;\n  border-radius: ${(props) => props.theme.borders[0]}px;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n  border: 0;\n  width: 100%;\n  &:focus {\n    outline: none;\n  }\n`;\n","import { Link } from \"react-router-dom\";\nimport styled from \"ui/styled\";\nimport { space, SpaceProps } from \"styled-system\";\nimport shouldForwardProp from \"@styled-system/should-forward-prop\";\n\nexport default styled(Link, { shouldForwardProp })<SpaceProps>`\n  text-decoration: none;\n  color: inherit;\n  ${space};\n`;\n","import styled from \"ui/styled\";\n\ninterface ButtonProps {\n  appearance: \"regular\" | \"outline\";\n  color: \"primary\" | \"secondary\" | \"warning\" | \"error\";\n}\n\nexport default styled.button<ButtonProps>`\n  border-radius: 4px;\n  height: 36px;\n  padding: 0 16px;\n  cursor: pointer;\n  font-family: \"Fjalla One\";\n  ${(props) =>\n    props.appearance === \"regular\"\n      ? `\n    color: white;\n    background: ${props.theme.colors[props.color]};\n    border: none;\n  `\n      : `\n      color: ${props.theme.colors[props.color]};\n      background: white;\n      border: 1px solid ${props.theme.colors[props.color]};\n      `}\n`;\n","import styled from \"ui/styled\";\n\nexport default styled.div`\n  * {\n    font-family: \"Fjalla One\";\n  }\n`;\n","import React, { FC } from \"react\";\nimport styled from \"ui/styled\";\nimport { Text } from \"ui\";\nimport { City } from \"types\";\n\ninterface WrapProps {\n  visible: boolean;\n}\n\nconst Wrap = styled.ul<WrapProps>`\n  display: ${(props) => (props.visible ? \"block\" : \"none\")};\n  background: white;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n  padding: 8px 0;\n  border-radius: ${(props) => props.theme.borders[0]}px;\n`;\n\nconst CityOption = styled.li`\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  padding: 0 12px;\n  &:hover {\n    background: ${(props) => props.theme.colors.primaryDim};\n  }\n`;\n\ninterface AutocompleteResultsProps {\n  cities: City[];\n  callback: (val?: any) => void;\n}\n\nconst AutocompleteResults: FC<AutocompleteResultsProps> = ({\n  cities,\n  callback,\n}) => {\n  return (\n    <Wrap visible={Boolean(cities.length)}>\n      {cities.map((city) => (\n        <CityOption key={city.id} onClick={() => callback(city)}>\n          <Text fontSize={2}>\n            {city.name}, {city.country}\n          </Text>\n        </CityOption>\n      ))}\n    </Wrap>\n  );\n};\n\nexport default AutocompleteResults;\n","import React, { FC } from \"react\";\nimport GFL from \"react-google-font-loader\";\n\nconst GoogleFontLoader: FC = () => (\n  <GFL\n    fonts={[\n      {\n        font: \"Fjalla One\",\n        weights: [400],\n      },\n    ]}\n  />\n);\n\nexport default GoogleFontLoader;\n","import React, { FC } from \"react\";\nimport { Box } from \"ui\";\n\nconst Forecast: FC = () => {\n  return <Box p={3}>forecast</Box>;\n};\n\nexport default Forecast;\n","import axios from \"axios\";\n//@ts-ignore\nimport Geonames from \"geonames.js\";\nimport { API_KEY } from \"../config\";\n\n// TODO: weatherstack api and autocomplete search\n\nexport const forecastApi = axios.create({\n  baseURL: `http://api.weatherstack.com/`,\n  params: {\n    access_key: API_KEY,\n    units: \"f\",\n  },\n});\n\nconst geo = new Geonames({\n  username: \"ablitto\",\n  lan: \"en\",\n  encoding: \"JSON\",\n});\n\nexport const geoApi = async (cityName: string) => {\n  try {\n    const locations = await geo.search({\n      q: cityName,\n      featureCode: \"P\",\n      maxRows: 10,\n      isNameRequired: true,\n    });\n    return locations.geonames;\n  } catch (err) {\n    console.error(err);\n  }\n  return [];\n};\n","export const API_KEY = process.env.REACT_APP_API_KEY;\n","import { AppThunk } from \"duck\";\nimport { City } from \"types\";\n\nexport const setModalCity = (city: City): AppThunk => (dispatch, getState) => {\n  dispatch({\n    type: \"SET_MODAL_CITY\",\n    id: city.id,\n  });\n  const cityExists = getState().cities.some((c) => c.id === city.id);\n  if (!cityExists) {\n    dispatch({\n      type: \"ADD_CITY\",\n      city,\n    });\n  }\n};\n","import React, { FC, useState } from \"react\";\nimport { City, GeoCity } from \"types\";\nimport { AutocompleteResults, Box } from \"ui\";\nimport { Input } from \"ui\";\nimport { geoApi } from \"api\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport { Modal } from \"containers\";\nimport { useHistory } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { useDispatch } from \"react-redux\";\nimport { setModalCity } from \"actions/modalCity\";\n\nconst Home: FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [cities, setCities] = useState<City[]>([]);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n    if (!e.target.value.length) {\n      setCities([]);\n    } else {\n      geoApi(e.target.value).then((res: GeoCity[]) =>\n        setCities(\n          res.map((geoCity) => ({\n            name: geoCity.name,\n            country: geoCity.countryName,\n            lat: geoCity.lat,\n            lng: geoCity.lng,\n            id: String(geoCity.geonameId),\n            population: geoCity.population,\n          }))\n        )\n      );\n    }\n  };\n  const callback = (city: City) => {\n    const searchQuery = {\n      lat: city.lat,\n      lng: city.lng,\n    };\n    setCities([]);\n    setValue(\"\");\n    dispatch(setModalCity(city));\n    history.push(`?${queryString.stringify(searchQuery)}`);\n  };\n  return (\n    <Box p={3}>\n      <Box position=\"relative\">\n        <DebounceInput\n          element={Input as any}\n          value={value}\n          onChange={onChange}\n          minLength={0}\n          debounceTimeout={300}\n          placeholder=\"Search here...\"\n        />\n        <Box position=\"absolute\" left={0} right={0} mt={2}>\n          <AutocompleteResults cities={cities} callback={callback} />\n        </Box>\n      </Box>\n      <Modal />\n    </Box>\n  );\n};\n\nexport default Home;\n","import { connect } from \"react-redux\";\nimport { Home } from \"pages\";\n\nexport default connect()(Home);\n","import { CityPreview } from \"containers\";\nimport React, { FC, useEffect } from \"react\";\nimport { City } from \"types\";\nimport { Box, Button, Text } from \"ui\";\n\ninterface SidebarProps {\n  top: string[];\n  getTop15Cities: () => void;\n  cities: City[];\n}\n\nconst getSortedTopCities = (top: string[], cities: City[]): City[] => {\n  const topCities = [];\n  for (let i = 0; i < top.length; i++) {\n    for (let j = 0; j < cities.length; j++) {\n      if (top[i] === cities[j].id) {\n        topCities.push(cities[j]);\n      }\n    }\n  }\n  return topCities.sort((a, b) =>\n    a.name.toUpperCase() < b.name.toUpperCase() ? -1 : 1\n  );\n};\n\nconst Sidebar: FC<SidebarProps> = ({ top, getTop15Cities, cities }) => {\n  useEffect(() => {\n    if (!top.length) {\n      getTop15Cities();\n    }\n  }, [top, getTop15Cities]);\n  const topCities = getSortedTopCities(top, cities);\n  return (\n    <Box p={3}>\n      <Box mb={3} display=\"flex\" alignItems=\"center\">\n        <Text fontSize={4} mr={3}>\n          {top.length ? `TOP ${top.length}` : \"Loading top cities\"}\n        </Text>\n        {top.length >= 1 && top.length < 15 ? (\n          <Button\n            appearance=\"outline\"\n            color=\"primary\"\n            onClick={() => getTop15Cities()}\n          >\n            Restore list\n          </Button>\n        ) : null}\n      </Box>\n      {topCities.map((city) => (\n        <CityPreview\n          key={city.id}\n          city={city}\n          isTop={Boolean(top.length > 1)}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","import { connect } from \"react-redux\";\nimport { Forecast } from \"pages\";\n\nexport default connect()(Forecast);\n","import { AppThunk } from \"duck\";\n\nimport { forecastApi } from \"api\";\nimport { City, Forecast } from \"types\";\nimport { toast } from \"react-toastify\";\n\nexport const getModalForecast = (): AppThunk => (dispatch, getState) => {\n  const { modal, cities } = getState();\n  const city: City = cities.find((city) => city.id === modal);\n  dispatch(getForecast(city.id));\n};\n\nexport const getForecast = (\n  id: string,\n  showToast: boolean = false\n): AppThunk => async (dispatch, getState) => {\n  const { cities } = getState();\n  const city = cities.find((c) => c.id === id);\n  const { data } = await forecastApi.get(\"current\", {\n    params: {\n      query: `${city.lat},${city.lng}`,\n    },\n  });\n  const { current }: { current: Forecast } = data;\n  dispatch({\n    type: \"SET_FORECAST\",\n    forecast: {\n      [id]: {\n        ...current,\n        last_update: Date.now(),\n      },\n    },\n  });\n  if (showToast) {\n    toast.success(\"Forecast updated\");\n  }\n};\n","import { RootState } from \"duck\";\nimport React, { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Box } from \"ui\";\n\ninterface ForecastPreviewProps {\n  id: string;\n}\n\nconst ForecastPreview: FC<ForecastPreviewProps> = ({ id }) => {\n  const forecast = useSelector((state: RootState) => state.forecasts[id]);\n  if (!forecast) {\n    return <Box mt={2}>Loading forecast preview</Box>;\n  }\n  return <Box mt={2}>Current: {forecast.temperature}°F</Box>;\n};\n\nexport default ForecastPreview;\n","import React, { FC, useEffect } from \"react\";\nimport styled from \"ui/styled\";\nimport { Text, Box } from \"ui\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { City } from \"types\";\nimport { setModalCity } from \"actions/modalCity\";\nimport { RootState } from \"duck\";\nimport { getForecast } from \"actions/forecast\";\nimport ForecastPreview from \"./ForecastPreview\";\nimport { useHistory } from \"react-router-dom\";\nimport { removeFromTop } from \"actions/top\";\n\ninterface CityPreviewProps {\n  city: City;\n  isTop?: boolean;\n}\n\nconst BoxLink = styled(Box)`\n  display: block;\n  cursor: pointer;\n  background: ${(props) => props.theme.colors.primary};\n  color: white;\n  &:not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n  z-index: 90;\n`;\n\nconst UnderlinedText = styled(Text)`\n  text-decoration: underline;\n  z-index: 100;\n`;\n\nconst CityPreview: FC<CityPreviewProps> = ({ city, isTop }) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const forecast = useSelector((state: RootState) => state.forecasts[city.id]);\n  useEffect(() => {\n    if (!forecast) {\n      dispatch(getForecast(city.id));\n    }\n  }, [city.id, dispatch, forecast]);\n  const removeFromTopClick = (\n    e: React.MouseEvent<HTMLParagraphElement, MouseEvent>\n  ) => {\n    e.stopPropagation();\n    dispatch(removeFromTop(city.id));\n  };\n  const onClick = () => {\n    history.push(`?lat=${city.lat}&lng=${city.lng}`);\n    dispatch(setModalCity(city));\n  };\n  return (\n    <BoxLink p={3} onClick={onClick}>\n      <Text>\n        {city.name}, {city.country}\n      </Text>\n      <Text mt={1}>Population: {city.population}</Text>\n      <ForecastPreview id={city.id} />\n      {isTop ? (\n        <UnderlinedText onClick={removeFromTopClick}>\n          Remove from top list\n        </UnderlinedText>\n      ) : null}\n    </BoxLink>\n  );\n};\n\nCityPreview.defaultProps = {\n  isTop: false,\n};\nexport default CityPreview;\n","import { AppThunk } from \"duck\";\n\nexport const removeFromTop = (id: string): AppThunk => (dispatch) => {\n  dispatch({\n    type: \"REMOVE_TOP\",\n    id,\n  });\n};\n","import { CityPreview } from \"components\";\nimport React, { FC } from \"react\";\nimport { City } from \"types\";\nimport { Box, Text } from \"ui\";\n\ninterface FavoritesProps {\n  favorites: string[];\n  cities: City[];\n}\n\nconst getFavoriteCities = (favorites: string[], cities: City[]) => {\n  const favCities = [];\n  for (let i = 0; i < favorites.length; i++) {\n    for (let j = 0; j < cities.length; j++) {\n      if (favorites[i] === cities[j].id) {\n        favCities.push(cities[j]);\n      }\n    }\n  }\n  return favCities;\n};\n\nconst Favorites: FC<FavoritesProps> = ({ favorites, cities }) => {\n  const favoriteCities = getFavoriteCities(favorites, cities);\n  return (\n    <Box p={3}>\n      <Box mb={3}>\n        <Text fontSize={4}>Favorites</Text>\n      </Box>\n      {favoriteCities.map((city) => (\n        <CityPreview key={city.id} city={city} />\n      ))}\n    </Box>\n  );\n};\n\nexport default Favorites;\n","import { addFavorite, removeFavorite } from \"actions/favorites\";\nimport { getForecast } from \"actions/forecast\";\nimport { RootState } from \"duck\";\nimport React, { FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { City } from \"types\";\nimport { Box, Text, Button } from \"ui\";\nimport styled from \"ui/styled\";\n\nconst Head = styled(Box)`\n  background: ${(props) => props.theme.colors.primary};\n`;\n\nconst HeadText = styled(Text)`\n  color: white;\n`;\n\ninterface ImgBoxProps {\n  src: string;\n}\n\nconst ImgBox = styled(Box)<ImgBoxProps>`\n  background-image: url(${(props) => props.src});\n  height: 50px;\n  width: 50px;\n  background-size: contain;\n  border-radius: 4px;\n`;\n\ninterface DescriptionProps {\n  forecast: any;\n  isFavorite: boolean;\n  id: string;\n}\n\nconst Description: FC<DescriptionProps> = ({ forecast, isFavorite, id }) => {\n  const dispatch = useDispatch();\n  if (!forecast) {\n    return (\n      <Box p={3}>\n        <Text fontSize={4}>Loading data</Text>\n      </Box>\n    );\n  }\n  const date = new Date(forecast.last_update);\n  const formattedDate = date.toLocaleDateString(\"default\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  return (\n    <Box p={3} position=\"relative\" height=\"100%\">\n      <Text fontSize={4} mb={3}>\n        Current temperature: {forecast.temperature}°\n      </Text>\n      <Text fontSize={3} mb={3}>\n        Feels like: {forecast.feelslike}°\n      </Text>\n      <Text fontSize={3} mb={3}>\n        {forecast.weather_descriptions[0]}\n      </Text>\n      <ImgBox src={forecast.weather_icons[0]} mb={3} />\n      <Text>\n        Last updated: {formattedDate} {hour}:{minutes}\n      </Text>\n      <Box\n        position=\"absolute\"\n        left={0}\n        right={0}\n        bottom={0}\n        p={3}\n        display=\"flex\"\n        justifyContent=\"space-between\"\n      >\n        {isFavorite ? (\n          <Button\n            appearance=\"regular\"\n            color=\"error\"\n            onClick={() => dispatch(removeFavorite())}\n          >\n            Remove from favs\n          </Button>\n        ) : (\n          <Button\n            appearance=\"regular\"\n            color=\"primary\"\n            onClick={() => dispatch(addFavorite())}\n          >\n            Add to favs\n          </Button>\n        )}\n        <Button\n          appearance=\"outline\"\n          color=\"secondary\"\n          onClick={() => dispatch(getForecast(id, true))}\n        >\n          Update info\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nconst Body: FC = () => {\n  const { modal, cities, forecasts, favorites } = useSelector(\n    (state: RootState) => ({\n      modal: state.modal,\n      cities: state.cities,\n      forecasts: state.forecasts,\n      favorites: state.favorites,\n    })\n  );\n  const forecast = forecasts[modal];\n  const city: City = cities.find((city: City) => city.id === modal);\n  const isFavorite = favorites.some((fav) => fav === modal);\n  return (\n    <Box height=\"100%\" display=\"flex\" flexDirection=\"column\">\n      <Head p={3}>\n        <HeadText fontSize={4} fontWeight=\"bold\">\n          {city.name}, {city.country}\n        </HeadText>\n      </Head>\n      <Description forecast={forecast} isFavorite={isFavorite} id={city.id} />\n    </Box>\n  );\n};\n\nexport default Body;\n","import { AppThunk } from \"duck\";\n\nexport const addFavorite = (): AppThunk => async (dispatch, getState) => {\n  const { modal } = getState();\n  dispatch({\n    type: \"ADD_FAVORITE\",\n    id: modal,\n  });\n};\n\nexport const removeFavorite = (): AppThunk => async (dispatch, getState) => {\n  const { modal } = getState();\n  dispatch({\n    type: \"REMOVE_FAVORITE\",\n    id: modal,\n  });\n};\n","import { Styles } from \"react-modal\";\n\nconst styles: Styles = {\n  content: {\n    padding: 0,\n    height: 400,\n    width: 300,\n    position: \"relative\",\n    top: \"initial\",\n    bottom: \"initial\",\n    left: \"initial\",\n    right: \"initial\",\n    marginTop: 40,\n  },\n  overlay: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n\nexport default styles;\n","import React, { FC, useEffect } from \"react\";\nimport RModal from \"react-modal\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { Body } from \"./components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getModalForecast } from \"actions/forecast\";\nimport style from \"./style\";\nimport { RootState } from \"duck\";\n\nRModal.setAppElement(\"body\");\n\nconst Modal: FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const modal = useSelector((state: RootState) => state.modal);\n  const lat = queryString.parse(location.search).lat as string;\n  const lng = queryString.parse(location.search).lng as string;\n  const forecast = useSelector((state: RootState) => state.forecasts[modal]);\n  const isOpen = Boolean(lat) && Boolean(lng);\n  useEffect(() => {\n    if (isOpen && !forecast) {\n      dispatch(getModalForecast());\n    }\n  }, [isOpen, dispatch, forecast]);\n  return (\n    <RModal\n      isOpen={isOpen}\n      onRequestClose={() => history.push(\"/\")}\n      style={style}\n    >\n      <Body />\n    </RModal>\n  );\n};\n\nexport default Modal;\n","import { getUserCity } from \"actions/cities\";\nimport CityPreview from \"components/CityPreview\";\nimport { usePosition } from \"hooks\";\nimport React, { FC, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { City } from \"types\";\nimport { Box, Text } from \"ui\";\n\ninterface UserLocationProps {\n  userLocation: string;\n  cities: City[];\n}\n\nconst UserLocation: FC<UserLocationProps> = ({ userLocation, cities }) => {\n  const { error, latitude, longitude } = usePosition();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (latitude && longitude) {\n      dispatch(getUserCity(latitude, longitude));\n    }\n  }, [dispatch, latitude, longitude]);\n  if (error) {\n    return (\n      <Box position=\"fixed\" bottom={20} right={20}>\n        Please allow position tracking\n      </Box>\n    );\n  }\n  console.log(userLocation);\n  if (userLocation) {\n    const city = cities.find((city) => city.id === userLocation)!;\n    return (\n      <Box position=\"fixed\" bottom={20} right={20}>\n        <Text>Your current location</Text>\n        <CityPreview city={city} />\n      </Box>\n    );\n  }\n  return null;\n};\n\nexport default UserLocation;\n","import { useEffect, useRef, useState } from \"react\";\n\nexport const usePrevious = <T extends unknown>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const usePosition = (): {\n  error: null | string;\n  latitude?: number;\n  longitude?: number;\n} => {\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState<null | string>(null);\n\n  const onChange = ({ coords }: any) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n    });\n  };\n  const onError = (error: any) => {\n    setError(error.message);\n  };\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      setError(\"Geolocation is not supported\");\n      return;\n    }\n    const watcher = geo.watchPosition(onChange, onError);\n    return () => geo.clearWatch(watcher);\n  }, []);\n  return { ...position, error };\n};\n","import { AppThunk } from \"duck\";\nimport { geoApi } from \"api\";\nimport { City } from \"types\";\nimport axios from \"axios\";\n\nexport const getCityByName = (cityName: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const cities: City[] | [] = await geoApi(cityName);\n  dispatch({\n    type: \"ADD_CITY\",\n    city: cities[0],\n  });\n};\n\nexport const getTop15Cities = (): AppThunk => async (dispatch, getState) => {\n  const response = await axios.get(\n    \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=geonames-all-cities-with-a-population-1000&q=&rows=15&sort=population&facet=timezone&facet=country\"\n  );\n  const cities = response.data.records.map((r: any) => ({\n    name: r.fields.name,\n    country: r.fields.country,\n    lat: r.fields.latitude,\n    lng: r.fields.longitude,\n    id: r.fields.geoname_id,\n    population: r.fields.population,\n  }));\n  const ids = response.data.records.map((r: any) => r.fields.geoname_id);\n  dispatch({\n    type: \"ADD_CITIES\",\n    cities,\n  });\n  dispatch({\n    type: \"ADD_TOP_CITIES\",\n    ids,\n  });\n};\n\nexport const getUserCity = (lat: number, lng: number): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  const { data } = await axios.get(\"http://api.geonames.org/findNearbyJSON\", {\n    params: {\n      username: \"ablitto\",\n      lan: \"en\",\n      lat,\n      lng,\n    },\n  });\n  const city: City = {\n    name: data.geonames[0].name,\n    country: data.geonames[0].countryName,\n    lat: data.geonames[0].lat,\n    lng: data.geonames[0].lng,\n    id: String(data.geonames[0].geonameId),\n    population: data.geonames[0].population,\n  };\n  dispatch({\n    type: \"ADD_CITY\",\n    city,\n  });\n  dispatch({\n    type: \"SET_USER_LOCATION\",\n    id: city.id,\n  });\n};\n","import { connect } from \"react-redux\";\nimport { Sidebar } from \"components\";\nimport { RootState } from \"duck\";\nimport { getTop15Cities } from \"actions/cities\";\n\nconst mapStateToProps = (state: RootState) => ({\n  top: state.top,\n  cities: state.cities,\n});\nconst mapDispatchToProps = {\n  getTop15Cities,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","import { connect } from \"react-redux\";\nimport { CityPreview } from \"components\";\n\nexport default connect()(CityPreview);\n","import { connect } from \"react-redux\";\nimport { Favorites } from \"components\";\nimport { RootState } from \"duck\";\n\nconst mapStateToProps = (state: RootState) => ({\n  cities: state.cities,\n  favorites: state.favorites,\n});\n\nexport default connect(mapStateToProps)(Favorites);\n","import { connect } from \"react-redux\";\nimport { Modal } from \"components\";\n\nexport default connect()(Modal);\n","import { connect } from \"react-redux\";\nimport { UserLocation } from \"components\";\nimport { RootState } from \"duck\";\n\nconst mapStateToProps = (state: RootState) => ({\n  userLocation: state.userLocation,\n  cities: state.cities,\n});\n\nexport default connect(mapStateToProps)(UserLocation);\n","import { Sidebar, Favorites, UserLocation } from \"containers\";\nimport { Home } from \"containers\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Box } from \"ui\";\n\nfunction App() {\n  return (\n    <Box height=\"100vh\">\n      <Box height=\"100%\" display=\"grid\" gridTemplateColumns=\"320px 1fr 320px\">\n        <Sidebar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n        </Switch>\n        <Favorites />\n        <UserLocation />\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import colors from \"./colors\";\nimport borders from \"./borders\";\n\nexport default {\n  colors,\n  borders,\n};\n","export default {\n  primary: \"#00A1E4\",\n  primaryDim: \"#EBF9FF\",\n  secondary: \"#04E762\",\n  warning: \"#FFD147\",\n  error: \"#FF6B6B\",\n};\n","export default [4, 8, 12, 16];\n","const initialState = {};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"SET_FORECAST\":\n      return {\n        ...state,\n        ...action.forecast,\n      };\n    default:\n      return state;\n  }\n};\n","import { City } from \"types\";\n\nconst initialState: City[] = [];\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"ADD_CITY\":\n      return [...state, action.city];\n    case \"ADD_CITIES\":\n      return [...state, ...action.cities].filter(\n        (v, i, a) => a.findIndex((t) => t.id === v.id) === i\n      );\n    default:\n      return state;\n  }\n};\n","const initialState: string[] = [];\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"ADD_FAVORITE\":\n      return [...state, action.id];\n    case \"REMOVE_FAVORITE\":\n      return state.filter((el) => el !== action.id);\n    default:\n      return state;\n  }\n};\n","const initialState: string[] = [];\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"ADD_TOP_CITIES\":\n      return [...new Set([...state, ...action.ids])];\n    case \"REMOVE_TOP\":\n      return state.filter((el) => el !== action.id);\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport {\n  forecasts,\n  cities,\n  top,\n  favorites,\n  modal,\n  userLocation,\n} from \"reducers\";\n\nexport default combineReducers({\n  forecasts,\n  cities,\n  top,\n  favorites,\n  modal,\n  userLocation,\n});\n","const initialState = \"\";\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"SET_MODAL_CITY\":\n      return action.id;\n    default:\n      return state;\n  }\n};\n","const initialState = \"\";\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"SET_USER_LOCATION\":\n      return action.id;\n    default:\n      return state;\n  }\n};\n","import { Action, createStore, applyMiddleware } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./rootReducer\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"normalize.css\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"ui/styled/theme\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"duck\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { GFL, GlobalStyles } from \"ui\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor} loading={\"test\"}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyles>\n            <BrowserRouter>\n              <App />\n            </BrowserRouter>\n          </GlobalStyles>\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n    <GFL />\n    <ToastContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}